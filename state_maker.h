/******************************************************************************
 * File: state_maker.h
 * Description: class for getting all states of C program.
 * Date: March 2013 
 * Author: Valery Bitsoev
 * Email: valner47@gmail.com
*******************************************************************************/
#ifndef STATE_MAKER_H
#define STATE_MAKER_H

#include <fstream>
#include <iostream>
#include <utility>
#include <set>
/**
 * @brief structure to store vars of functions
 */
class IntVariable
{
public:
/**
 * @brief default constructor
 */
    IntVariable():m_value(0),m_init_flag(false){}
/**
 * @brief Assigment operator <IntVar> = <IntVar>
 * @param right right part of assigment operator
 * @return self object
 */
    IntVariable& operator=(const IntVariable & right)
    {
        this->m_value = right.m_value;
        this->m_init_flag = right.m_init_flag;
        return *this;
    }

/**
 * @brief Assigment operator <IntVar> = <Int>
 * @param right right part of assigment operator
 * @return self object
 */
    IntVariable& operator=(int right)
    {
        this->m_value = right;
        this->m_init_flag = true;
        return *this;
    }

/**
 * @brief overloaded output operator for IntVariable
 * @param stream output stream
 * @param right object to printing
 * @return Reference to stream
 */
    friend std::ostream& operator<<(std::ostream& stream, const IntVariable& right);
private:
/**
 * @brief stored value
 */
    int m_value;

/**
 * @brief indicates initialization of variable
 */
    bool m_init_flag;
};
struct FuncVars
{
    IntVariable a;
    IntVariable b;
    IntVariable x;
    IntVariable y;
    int counter;
};

/**
 * @brief class for getting all states of C program.
 */
class StateMaker
{
public:
/**
 * @brief class constructor
 * @param filename - name of output file
 * @param count flag - flag, indicates if need print states number
 */
    StateMaker(char* filename, bool count_flag);
/**
 * @brief class destructor
 */
    ~StateMaker();
/**
 * @brief generate and print states in console or file
 * @param f_a initial value of f::a
 * @param f_b initial value of f::b
 * @param g_a initial value of g::a
 * @param g_b initial value of g::b
 */
    void PrintStates(int f_a, int f_b, int g_a, int g_b);
private:
/**
 * @brief number of generated states
 */
    int m_states_number;
/** 
 * @brief flag, indicates if need print states number
 */
    int m_count_flag;
/**
 * @brief flag, indicates if output should be to file
 */
    bool m_to_file_flag;
/**
 * @brief stream for output file
 */
    std::ofstream m_file;
/** 
 * @brief stores pairs of counters, already generated by program
 */
    std::set< std::pair<int,int> > m_old;
/** 
 * @brief generates and prints all states after state, described by f, g and h
 * @param f - state of function f
 * @param g - state of function g
 * @param h - value of global variable
 */
    void GenerateStates(FuncVars f, FuncVars g, IntVariable h);

/**
 * @brief do step by f code
 * @param f - state of function f
 * @param g - state of function g
 * @param h - state of global variable
 */
    void StepInF(FuncVars f, FuncVars g, IntVariable h);

/**
 * @brief do step by g code
 * @param f - state of function f
 * @param g - state of function g
 * @param h - state of global variable
 */
    void StepInG(FuncVars f, FuncVars g, IntVariable h);
// Copy isn't allowed
    StateMaker(StateMaker&);
    StateMaker& operator=(StateMaker&);
};

#endif //STATE_MAKER_H
